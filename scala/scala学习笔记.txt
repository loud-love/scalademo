注意的是 Scala 不支持 ++i 和 i++ 运算符，因此需要使用 i += 1 来加一
Scala 访问数组的语法是使用 () 而非 [] 。

Scala 使用方括号来指明数据类型参数，而非尖括号




 Trait 的概念类似于Java中的 Interface，所不同的Scala中的 Trait 可以有方法的实现

 Mutable （可变）和 Immutable （不可变）

 一个简单的原则，如果代码中含有 var 类型的变量，这段代码就是传统的指令式编程，如果代码只有 val 变量，这段代码就很有可能是函数式代码，因此学会函数式编程关键是不使用 vars 来编写代码。

 尽量少用 vars 的好处，代码更简洁和明了，从而也可以减少错误的发生。因此 Scala 编程的一个基本原则上，能不用 vars，尽量不用 vars，能不用 mutable 变量，尽量不用 mutable 变量，能避免函数的副作用，尽量不产生副作用。




 慕课网:(辰方)
1.1
函数式思想(重点)
面向对象/面向函数式的两种方式


1.2
函数式编程的概念:

把计算当做函数的计算过程,避免状态.

纯函数:函数的纯粹性,没有副作用(状态的变化)
数据都是不可变的,全部是final类型的

引用透明性,
相同的输入,总是得到相同的输出,反例: java的append方法

不变性
为了获取引用透明性,任何值都不能变化

函数是一等功能
一切都是计算,函数式编程中只有表达式,变量,函数都是表达式
高阶函数
闭包


表达式求值:严格求值,非严格求值
惰性求值


递归函数
递归实现循环
尾递归


函数式编程的优点:
生产效率高
易于推理
并行编程,多核计算,云计算


2.1搭环境
安装
SBT(Simple Build Tool)
cmd 中 sbt命令就行了
REPL(read Evaluate Print loop)交互式编程,编程得到结果
输入scala就进入环境了

sbt console  同样进入环境

IDE:
ScalaIDE(√)
IDEA


用文本的方式:
后缀.scala  源文件
scalac  X.scala 编译(要到scala安装目录下)
scala X 运行


3.1基础语法之变量
变量:
val immutable variable常量(不可修改)
var mutable   variable变量
lazy val 惰性求值常量
可以不显示指定变量的类型,因为scala会自动进行类型推到


val  x=10
val y:Int=20
x+y
可以直接引用res0

lazy val z=x-y;
不会马上求值,当第一次用到z的时候就会进行计算求值了

什么时候用lazy val? 定义的变量后面可能不会被用到,可以定义为lazy val.

只能够有lazy val,不能有lazy  var!!!

3.2数据类型

Any(所有scala类父类)
AnyVal(值类型)           AnyRef(所有引用的父类)
Numeric type(数值)     All java/scala.* ref types
Boolean
Char
Unit(空类型,类似void)


Null是所有引用类型的最后一个子类
Nothing是所有scala的最后一个子类


val a:Byte=10
val b:Short=20
val c:Int =40
val d:Long=50

val e:Float=50
val f:Double=60.32

val x:Long=b  低向高转换
高向低转换会报错

boolean

true/false
val m=true
val n=false

val q='X'

val u:Unit=()
val p=()

Null和java的相同
用的少,用的Nothing

抛出异常了,返回值是Nothing

String就是java的
新增字符串插值(interpolation)
val myname="ke"
s"my name is ${myname}"
小写的s进行标记,就得到一个新的字符串了,进行了替换
var 和val 都可以这样用的

3.3函数与代码块

代码块Block也是一个表达式,其最终的求得的值是最后一个表达式的值

{exp1;exp2}

{
exp1
exp2
}

函数的定义:
def functionName(param:ParamType):ReturnType={
	//function body:expression
}

object funcExample{
	hello("sss")

	//制定返回类型
	def hello(name:String):String={
		s"hello world,${name}"
	}

	//不定义,自己推断返回类型
	def hello(name:String)={
		s"hello world,${name}"
	}

	def add(x:Int,y:Int)=x+y

	//只有一个代码块的{} 可以省略不写的

}


3.4 if和for

if表达式

val a=1
if(a!=1) "not one"
//> res0:Any()
因为表达式不成立,所以返回就是空,就是Unit,只是它的表现形式

for comprehension
循环推导

val l=List("aa","bbbb","ccbb");

for(
	s<-l //generator  循环遍历
)println(s)


for{
	s<-l
	if(s.length>3) 不满足就直接下一次循环,不打印了
}println(s)


val result_for=for{
	s<-l;
	s1=s.toUpperCase()  //variable binding
	if(s1!="")
}yield(s1)   //generator new Collention yield导出


3.5 try和match表达式

try语义和java 中一样,不过在scala中是一个表达式,会返回一个值


val result_try=try{
Integer.parseInt("da")
}catch{
case_=>0      //_是通配符,同时返回0
}finally{
println("always be printed")
}

match表达式
和switch类似

exp match{ //主要用在pattern match中
	case p1=>val1
	case p2=>val2
	...
	case_=valn
}


val code=1
var result_match=code match{
	case 1=>"one"
	case 2=>"two"
	case _=>"three"   //类似default
}



4.1求值策略

scala有两种
 call by value 对函数实参求值,且仅求值一次
 call by Name  函数实参每次在函数体内被用到时都会求值

scala通常使用call by value
如果函数形参类型以=>开头,那么会使用call by name
def foo(x:Int)=x    //call by value
def foo(x: =>Int)=x  //call by name   (注意:后面有一个空格,不然会报错的)


def test1(x:Int,y:Int):Int=x*x
首先对实参进行求值
test1(3+4,8)  先计算3+4 得到7 test1(7,8) 所以是7*7=49

def test2(x:=>Int,y:=>Int):Int=x*x
test2(3+4,8)  直接把3+4传入,进行替换所有的x 得到的是 先计算(3+4)*(3+4)
7*(3+4) 7*7  49

def bar(x:Int,y:=>Int):Int=1
def loop():Int=loop

bar(1,loop)  返回1
bar(loop,1)  一直死循环,因为不断的在递归调用loop,想要计算出loop的值,再放入,结果一直在递归调用




5.1函数和匿名函数

函数是第一等公民

scala支持
1.把函数作为实参传递给另一个函数
2.把函数作为返回值
3.把函数赋值给变量
4.把函数储存在数据结构里
在scala中,函数就像普通变量一样,同样也具有函数的类型

函数类型
在scala中,函数类型的格式为A=>B,表示一个接受类型A的参数,
并返回类型B的函数

例:Int=>String 是把整型映射为字符串的函数类型

高阶函数
用函数作为形参或返回值的函数,称为高阶函数
def operate(f:(Int,Int)=>Int)={
	f(4,4)
}

匿名函数
def greeting()=(name:String)=>{"hello"+""+name}

匿名函数Anonymous Function 就是函数常量,也叫函数文字量
定义格式是:
(形参列表)=>{函数体}

(x:Int,y:Int)=>x+y 

5.2 Scala柯里化

柯里化函数(Curried Function) 把具有多个参数的函数转换为一
条函数链,每个节点上是单一参数

例:以下两个add函数定义是等价的
def add(x:Int,y:Int)=x+y

def add(x:Int)(y:Int)=x+y  (柯里化的语法)

def curriedAdd(a:Int)(b:Int)=a+b
curriedAdd(2)(2) //4

val addOne=curriedAdd(1)_  //Int=>Int  通配符,只有b灵活可变
addOne(2)  //3
相当于curriedAdd(1)(2)

提高函数的复用性!!!相当于有了一个定值的参数

5.3递归与尾递归
递归函数(Recursive Function)在函数式编程中是实现循环的一种技术

n!计算
def factorial(n:Int):Int={
	if(n<=0) 1
	else n*factorial(n-1)
}

//缺陷,容易在堆栈中溢出,进行优化

尾递归(Tail Recursive Function)中所有递归形式的调用都出现在函数的尾部

当编译器检测到一个函数调用的是尾递归的时候,它就覆盖当前的活动记录而不是在栈中去创建一个新的


@annotation.tailrec   //注解,表明是尾递归
def factorial(n:Int,m:Int):Int={
	if(n<=0) m
	else n*factorial(n-1,m*n)
}
//每次m都获取最新的累乘的值

5.4例子
∑ba f(x)

object sumfunc{

	def sum(f:Int=>Int)(a:Int)(b:Int):Int={
		@annotation.tailrec
		def loop(n:Int,acc:Int):Int={
			if(n>b){
			println(s"n=${n},acc=${acc}")
			acc
			}else{
			println(s"n=${n},acc=${acc}")
			loop(n+1,acc+f(n))
			}
		}
		loop(a,0)
	}
	
	sum(x=>x)(1)(5)
	sum(x=>x*x)(1)(5)
	sum(x=>x*x*x)(1)(5)
	val sumSquare=sum(x=>x*x)_
	sumSquare(1)(5)
}


6.1 Collention-list基本使用
包结构:  ...

List[T]泛型可以不写,会自动推导
val a=List(1,2,3,5)

val b=0::a   把0放到a里面去
      元素/List 放到头部

val c="x"::"y"::"z"::Nil   //逐一的连接

val c2="x"::"y"::"z"   error: value :: is not a member of String  报出这个错误,不能少了后面的Nil

连接两个List
a:::c

List中元素访问
a.head  返回的是第一个元素

a.tail  返回的是除第一个元素外剩下的元素列表

a.isEmpty   是否为空

//变成字符串
def walkthru(l:List[Int]):String={
	if(l.isEmpty)""
	else l.head.toString+""+walkthru(l.tail)
}

6.2 list高级使用
a.filter(x=>x%2==1)    //返回符合要求的元素

"99 Red Balloons".toList

//保留数字
"99 Red Balloons".toList.filter(x=>Character.isDigit(x))

//取到B就返回false,就终止了
"99 Red Balloons".toList.takeWhile(x=>x!='B')


6.2 list-map
map 用于元素的转换,映射

//使用匿名函数
c.map(x=>toUpperCase)  转换为大写
c.map(_.toUpperCase)  

a.filter(_%2==1)

a.filter(_%2==1).map(_+10) 

val q=List(a,List(4,5,6))

q.map(x=>x.filter(_2%==0))

q.flatMap(_.filter(_%2==0))
会把flatMap两层的map转换为一层

6.3 reduceLeft与flodLeft
reduceLeft(op:(T,T))=>T

a.reduceLeft((x,y)=>x+y)

a.reduceLeft(_+_)


foldLeft(z:U)(op:(U,T)=>U)
a.foldLeft(0)(_+_)
a.foldLeft(1)(_*_)

6.4Rang与Stream

Rang就是一个整数的序列
 1 to 10 步径默认1  1-10
 1  to 10 by 2 设置步径
(1 to 10).toList
 1 until 10   1-9
 
 Stream  按需求值
就是一个lazy List  惰性求值列表,第一个值确定的,其他的不求值,用到的时候才求值
val s=1 #:: 2#:: 3#:: Stream.empty

val stream=(1 to 100000).toStream

stream.head
stream.tail


6.5 toupe与map

Tupe元组
可能有多个值,
val tp1=(1,2)
val tp2=1->2   一对的时候 pair
val t3=(1,"AA","CCC",97)
t3._1
t3._2
t3._3
t3._4
//求和
def sumSq(in:List[Double]):(Int,Double,Double)=
	in.foldLeft((0,0d,0d))
    ((t,v)=>(t._1+1,t._2+v,t._3+v*v))
	
sumSq(List(1.0,2.0,3.0))

Map[K,V]
val p=Map(1->"AA",2->"dsa")

p(1)
p(2)
p(3)

p.contains(1)  是否包含key

p.keys  所有keys

p.values  所有values

p+(3->"dsa")  新加入

p-1  删除

p++List(2->"dsa",5->"dsadsa")  放入多个

p--List(1,9)  删除多个


6.7快速排序案列

def qSort(a:List[Int]):List[Int]={
	if(a.length<2) a
	else qSort(a.filter(a.head>_))++
	a.filter(a.head==_)++
	qSort(a.filter(a.head<_))
}

qSort(List(1,4,7,8,3,2,7,9))







